bochsout.txt:00000318049i[KBD   ] reset-disable command received
bootsect.s:# 1 "<built-in>"
bootsect.s:BOOTSEG   = 0x07C0		! original address of boot-sector
bootsect.s:INITSEG   = 0x9000		! final address of boot-sector
bootsect.s:! things as simple as possible, we do no register set-up or anything,
bootsect.S:BOOTSEG   = 0x07C0		! original address of boot-sector
bootsect.S:INITSEG   = 0x9000		! final address of boot-sector
bootsect.S:! things as simple as possible, we do no register set-up or anything,
Binary file build matches
Binary file circular_buffer.o matches
Binary file core matches
Binary file devices.o matches
entry.s:# 1 "<built-in>"
Binary file hardware.o matches
Binary file interrupt.o matches
Binary file io.o matches
Binary file libauxjp.a matches
Binary file libc.o matches
Binary file libzeos.a matches
list.c:	list->next = list;
list.c:	list->prev = list;
list.c:	next->prev = new;
list.c:	next->prev = prev;
list.c:	return list->next == head;
Binary file list.o matches
Makefile:HOSTCFLAGS = -Wall -Wstrict-prototypes -g
Makefile:CFLAGS = -O2  -g $(JP) -fno-omit-frame-pointer -ffreestanding -Wall -I$(INCLUDEDIR)
Makefile:	gcc -m32 -g -fno-omit-frame-pointer -ffreestanding -Wall -Iinclude   -c -o user.o user.c
Binary file mm.o matches
sched.c:	return t->dir_pages_baseAddr;
sched.c:	return (page_table_entry *)(((unsigned int)(t->dir_pages_baseAddr->bits.pbase_addr))<<12);
sched.c:	t->dir_pages_baseAddr = (page_table_entry*) &dir_pages[pos]; 
sched.c:	t->dirPos = pos;
sched.c:	t->state = ST_READY;
sched.c:	t->stats.user_ticks = 0;
sched.c:	t->stats.system_ticks = 0;
sched.c:	t->stats.blocked_ticks = 0;
sched.c:	t->stats.ready_ticks = 0;
sched.c:	t->stats.elapsed_total_ticks = 0;
sched.c:	t->stats.total_trans = 0;
sched.c:	t->stats.remaining_ticks = DEFAULT_QUANTUM;
sched.c:	t->PID = 1;
sched.c:	t->state = ST_RUN;
sched.c:	set_cr3(t->dir_pages_baseAddr);
sched.c:	if (t->state != ST_RUN) {
sched.c:		if(t->state == ST_BLOCKED) { //comes from state blocked
sched.c:			t->stats.blocked_ticks += total_ticks - t->stats.elapsed_total_ticks;
sched.c:			t->stats.elapsed_total_ticks = total_ticks;
sched.c:			t->stats.ready_ticks += get_ticks() - t->stats.elapsed_total_ticks;
sched.c:			t->stats.elapsed_total_ticks = total_ticks;
sched.c:		if(t != idle_task) list_del(&t->anchor);
sched.c:		if (!start) list_add_tail(&t->anchor, dest);
sched.c:		else list_add(&t->anchor, dest);
sched.c:		t->state = ST_READY;
sched.c:		t->state = -THE_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING;
sched.c:		t->state = ST_RUN;
sched.c:		t->state = ST_BLOCKED;
sched.c:	t->stats.remaining_ticks = t->quantum;
sched.c:	t->stats.total_trans++;
sched.c:	return t->quantum;
sched.c:	t->quantum = new_quantum;
Binary file sched.o matches
sys.c:	t->stats.system_ticks += total_ticks - current()->stats.elapsed_total_ticks;
sys.c:	t->stats.elapsed_total_ticks=total_ticks;
sys.c:	t->stats.user_ticks += total_ticks - t->stats.elapsed_total_ticks;
sys.c:	t->stats.elapsed_total_ticks = total_ticks;
sys.c:	new_t->PID = nextPID++;
sys.c:	list_add_tail(&new_t->anchor, &readyqueue);
sys.c:	return new_t->PID;
sys.c:	set_cr3(curr_t->dir_pages_baseAddr);
sys.c:	new_t->PID = nextPID++;
sys.c:	list_add_tail(&new_t->anchor, &readyqueue);
sys.c:	return new_t->PID;
sys.c:	if(t->state == ST_READY) {
sys.c:		t->stats.ready_ticks += total_ticks - t->stats.elapsed_total_ticks;
sys.c:		t->stats.elapsed_total_ticks = total_ticks;
sys.c:	if(t->state == ST_BLOCKED) {
sys.c:		t->stats.blocked_ticks += total_ticks - t->stats.elapsed_total_ticks;
sys.c:		t->stats.elapsed_total_ticks = total_ticks;
sys.c:	copy_to_user(&t->stats, st, sizeof(struct stats));
sys.c:		if (t->sem_destroyed) return -1;
sys.c:		t->sem_destroyed = 1;
sys_call_table.s:# 1 "<built-in>"
Binary file sys.o matches
Binary file system matches
Binary file system.o matches
Binary file user matches
Binary file user.o matches
Binary file utils.o matches
wrappers.s:# 1 "<built-in>"
